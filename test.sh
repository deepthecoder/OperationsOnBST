#!/bin/bash

# Test script:


# Submission source filename & executable filename
declare -r SUBMISSION_FILENAME="Main.java"
declare -r SUBMISSION_EXE="Main"

# Minimum & maximum test array indices
declare -r MIN_INDEX=0
declare -r MAX_INDEX=41

# Array of input strings.
declare -ar INPUTS=(
					 "1 100 1 50 1 50 1 100 1 100 5 6 0"
					 "5 6 7 0"
					 "3 4 5 6 7 0"
					 "1 100 1 50 1 50 5 6 0"
                     "1 100 1 50 1 50 1 100 1 100 5 6 0"
					 "1 100 1 100 1 50 1 150 3 4 5 6 7 0"
					 "1 100 1 50 1 150 1 20 1 70 1 120 1 180 3 4 5 7 0"
				     "1 100 1 150 1 150 1 20 1 70 1 120 1 180 2 100 6 7 0"
					 "1 100 1 50 1 50 1 50 8 100 5 6 7 2 100 2 50 0"
					 "2 100 1 100 1 100 1 100 1 50 8 100 5 6 7 2 100 0"
					 "1 100 1 100 1 100 1 50 8 100 8 100 8 100 8 50 5 6 0"
					 "1 100 1 100 1 100 1 50 1 50 1 50 8 50 8 100 8 100 8 100 8 50 5 6 0"
					 "1 100 1 50 8 100 1 20 1 70 8 50 5 6 0"
					 "1 100 8 100 1 20 1 70 8 50 5 6 0"
					 "1 100 8 100 1 20 8 20 1 70 8 70 5 6 0"
					 "1 100 8 100 1 20 8 20 1 70 8 70 1 -100 3 4 5 6 7 0"
					 "1 100 1 20 1 -20 1 -100 1 -200 1 -300 3 4 5 6 7 0"
					 "1 100 1 50 1 70 1 81 1 84 1 85 1 110 5 7 8 50 5 7 0"
					 "8 100 3 4 5 6 7 1 100 1 200 1 300 1 400 8 100 5 7 0"
					 "8 -80 3 4 1 -100 1 200 1 300 1 400 8 100 8 -100 5 6 0"
					 "1 100 1 50 1 150 8 100 2 100 1 150 5 7 0"
					 "1 100 1 50 1 150 8 50 2 50 1 100 5 7 0"
					 "1 100 1 50 1 150 8 150 2 150 1 50 5 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 8 -60 1 -80 5 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 8 -80 5 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 1 -80 8 -100 5 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 1 -120 8 -110 5 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 1 -100 8 -120 5 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 1 -60 8 -130 6 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 8 -120 8 -110 8 -100 2 -60 1 -60 2 -50 6 7 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 8 -120 8 -110 8 -100 1 -80 3 4 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 8 -120 8 -110 3 1 -100 4 0"
					 "1 -100 1 -110 1 -120 1 -80 1 -60 8 -120 4 1 -120 3 0"
					 "1 -100 1 -100 1 90 1 90 1 90 1 90 4 1 90 3 0"
					 "1 -100 1 -100 1 90 8 -100 1 90 1 90 1 90 3 8 90 4 0"
					 "1 -100 1 -100 1 90 8 -100 1 90 8 90 1 90 1 90 3 4 0"
					 "1 100 3 1 110 3 1 120 3 1 130 3 1 140 3 4 0"
					 "1 100 1 100 4 1 90 4 1 80 4 1 80 4 1 80 4 3 0"
					 "1 0 1 0 1 0 1 0 1 0 1 1 1 1 2 1 2 0 3 1 4 5 7 0"
					 "1 0 1 0 1 0 1 0 1 0 1 1 1 1 2 1 2 0 3 8 1 8 0 6 7 0"
					 "1 0 1 0 1 0 1 0 1 0 1 1 1 1 2 1 2 0 8 0 8 0 6 7 0"
					 "0 1 2 1 3 1 4 1 5 1 8 3 4 5 6 7 0"
					)

# Array of expected output strings
declare -ar EXPECTED_OUTPUTS=(
							   "100(3)50(2)50(2)100(3)"
							   ""
							   "0(0)0(0)"
							   "100(1)50(2)50(2)100(1)"
                               "100(3)50(2)50(2)100(3)"
							   "150(1)50(1)100(2)50(1)150(1)50(1)150(1)100(2)50(1)100(2)150(1)"
							   "180(1)20(1)100(1)50(1)20(1)70(1)150(1)120(1)180(1)20(1)50(1)70(1)100(1)120(1)150(1)180(1)"
							   "100(1)70(1)20(1)120(1)180(1)150(2)100(1)20(1)70(1)100(1)120(1)150(2)180(1)"
							   "50(3)50(3)50(3)100(0)50(3)"
							   "100(0)100(2)50(1)50(1)100(2)50(1)100(2)100(2)"
							   ""
							   "50(1)50(1)"
							   "20(1)70(1)70(1)20(1)"
							   "20(1)70(1)70(1)20(1)"
							   ""
							   "-100(1)-100(1)-100(1)-100(1)-100(1)"
							   "100(1)-300(1)100(1)20(1)-20(1)-100(1)-200(1)-300(1)-300(1)-200(1)-100(1)-20(1)20(1)100(1)-300(1)-200(1)-100(1)-20(1)20(1)100(1)"
							   "100(1)50(1)70(1)81(1)84(1)85(1)110(1)50(1)70(1)81(1)84(1)85(1)100(1)110(1)100(1)70(1)81(1)84(1)85(1)110(1)70(1)81(1)84(1)85(1)100(1)110(1)"
							   "0(0)0(0)200(1)300(1)400(1)200(1)300(1)400(1)"
							   "0(0)0(0)200(1)300(1)400(1)400(1)300(1)200(1)"
							   "100(0)50(1)150(2)50(1)150(2)"
							   "50(0)100(2)150(1)100(2)150(1)"
							   "150(0)100(1)50(2)50(2)100(1)"
							   "-100(1)-110(1)-120(1)-80(2)-120(1)-110(1)-100(1)-80(2)"
							   "-100(1)-110(1)-120(1)-60(1)-120(1)-110(1)-100(1)-60(1)"
							   "-110(1)-120(1)-80(2)-60(1)-120(1)-110(1)-80(2)-60(1)"
							   "-100(1)-120(2)-80(1)-60(1)-120(2)-100(1)-80(1)-60(1)"
							   "-100(2)-110(1)-80(1)-60(1)-110(1)-100(2)-80(1)-60(1)"
							   "-120(1)-110(1)-60(2)-80(1)-100(1)-120(1)-110(1)-100(1)-80(1)-60(2)"
							   "-60(1)-50(0)-60(2)-80(1)-80(1)-60(2)"
							   "-60(1)-80(2)"
							   "-60(1)-100(2)"
							   "-110(1)-60(1)"
							   "-100(2)90(5)"
							   "90(4)-100(1)"
							   "90(3)-100(1)"
							   "100(1)110(1)120(1)130(1)140(1)100(1)"
							   "100(2)90(1)80(1)80(2)80(3)100(2)"
							   "1(2)0(5)1(2)0(5)1(2)4(1)0(5)1(2)4(1)"
							   "1(2)0(5)1(2)1(1)0(4)0(4)1(1)"
							   "1(2)0(5)1(2)0(3)0(3)1(2)"
							   ""
							   )


# Test all possible inputs
i=$MIN_INDEX
success_count=0
for expected in "${EXPECTED_OUTPUTS[@]}"
do
	printf "Testing \'${INPUTS[$i]}\'"
	output=$( echo ${INPUTS[$i]} | java $SUBMISSION_EXE | tr -d [:space:] )
	if [[ $output == $expected ]]; then
		printf "\n\t -> PASS\n"
		let "success_count+=1"
	else
		printf "\n\t -> FAIL\n"
		printf "\tExpected: \"$expected\"\n\tActual: \"$output\"\n"
	fi

	let "i++"
	if [ $i -gt $MAX_INDEX ]; then
		break
	fi
done

printf "\n"

# Output results
printf "Results: $success_count/$((MAX_INDEX+1))\n"
